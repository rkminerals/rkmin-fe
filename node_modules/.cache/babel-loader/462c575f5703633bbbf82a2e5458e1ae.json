{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { Vector } from './vector';\n/**\n * Creates a line vector\n */\n\nvar Line =\n/** @class */\nfunction (_super) {\n  __extends(Line, _super);\n  /**\n   * if either of the params receive one number (`new Line(10,10)`):\n   *  * `point1` is applied to `x1` and `y1`\n   *  * `point2` is applied to `x2` and `y2`\n   *\n   * if either of the params receive a tuple (`new Line([10, 5],[20, 30])`)\n   *  * `point1[0]` is applied to `x1` and `point1[1]` is applied to `y1`\n   *  * `point2[0]` is applied to `x2` and `point2[1]` is applied to `y2`\n   *\n   * @param point1 the first point where the line will start\n   * @param point2 the second point where the line will finish\n   */\n\n\n  function Line(point1, point2) {\n    var _this = _super.call(this, 'line') || this;\n\n    _this.setPoint1(point1);\n\n    _this.setPoint2(point2);\n\n    return _this;\n  }\n  /**\n   * Sets the first point to the line vector\n   * @param point the point of the line vector\n   */\n\n\n  Line.prototype.setPoint1 = function (point) {\n    if (Array.isArray(point)) {\n      this.content.x1 = point[0];\n      this.content.y1 = point[1];\n    } else {\n      this.content.x1 = point;\n      this.content.y1 = point;\n    }\n  };\n  /**\n   * Sets the second point to the line vector\n   * @param point the point of the line vector\n   */\n\n\n  Line.prototype.setPoint2 = function (point) {\n    if (Array.isArray(point)) {\n      this.content.x2 = point[0];\n      this.content.y2 = point[1];\n    } else {\n      this.content.x2 = point;\n      this.content.y2 = point;\n    }\n  };\n\n  return Line;\n}(Vector);\n\nexport { Line };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,MAAT,QAAuB,UAAvB;AAGA;;;;AAGA;AAAA;AAAA;AAA0BC;AAEtB;;;;;;;;;;;;;;AAYA,gBACIC,MADJ,EAEIC,MAFJ,EAEqC;AAFrC,gBAIIC,kBAAM,MAAN,KAAa,IAJjB;;AAKIC,SAAI,CAACC,SAAL,CAAeJ,MAAf;;AACAG,SAAI,CAACE,SAAL,CAAeJ,MAAf;;;AACH;AAED;;;;;;AAIQK,6BAAR,UAAkBC,KAAlB,EAAkD;AAC9C,QAAIC,KAAK,CAACC,OAAN,CAAcF,KAAd,CAAJ,EAA0B;AACtB,WAAKG,OAAL,CAAaC,EAAb,GAAkBJ,KAAK,CAAC,CAAD,CAAvB;AACA,WAAKG,OAAL,CAAaE,EAAb,GAAkBL,KAAK,CAAC,CAAD,CAAvB;AACH,KAHD,MAGO;AACH,WAAKG,OAAL,CAAaC,EAAb,GAAkBJ,KAAlB;AACA,WAAKG,OAAL,CAAaE,EAAb,GAAkBL,KAAlB;AACH;AACJ,GARO;AAUR;;;;;;AAIQD,6BAAR,UAAkBC,KAAlB,EAAkD;AAC9C,QAAIC,KAAK,CAACC,OAAN,CAAcF,KAAd,CAAJ,EAA0B;AACtB,WAAKG,OAAL,CAAaG,EAAb,GAAkBN,KAAK,CAAC,CAAD,CAAvB;AACA,WAAKG,OAAL,CAAaI,EAAb,GAAkBP,KAAK,CAAC,CAAD,CAAvB;AACH,KAHD,MAGO;AACH,WAAKG,OAAL,CAAaG,EAAb,GAAkBN,KAAlB;AACA,WAAKG,OAAL,CAAaI,EAAb,GAAkBP,KAAlB;AACH;AACJ,GARO;;AASZ;AAlDA,EAA0BT,MAA1B","names":["Vector","__extends","point1","point2","_super","_this","setPoint1","setPoint2","Line","point","Array","isArray","content","x1","y1","x2","y2"],"sourceRoot":"","sources":["../../../../src/lib/definitions/vector/line.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}