{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport get from \"rc-util/es/utils/get\";\nimport set from \"rc-util/es/utils/set\";\nimport { toArray } from './typeUtil';\n/**\n * Convert name to internal supported format.\n * This function should keep since we still thinking if need support like `a.b.c` format.\n * 'a' => ['a']\n * 123 => [123]\n * ['a', 123] => ['a', 123]\n */\n\nexport function getNamePath(path) {\n  return toArray(path);\n}\nexport function getValue(store, namePath) {\n  var value = get(store, namePath);\n  return value;\n}\nexport function setValue(store, namePath, value) {\n  var removeIfUndefined = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var newStore = set(store, namePath, value, removeIfUndefined);\n  return newStore;\n}\nexport function cloneByNamePathList(store, namePathList) {\n  var newStore = {};\n  namePathList.forEach(function (namePath) {\n    var value = getValue(store, namePath);\n    newStore = setValue(newStore, namePath, value);\n  });\n  return newStore;\n}\nexport function containsNamePath(namePathList, namePath) {\n  return namePathList && namePathList.some(function (path) {\n    return matchNamePath(path, namePath);\n  });\n}\n\nfunction isObject(obj) {\n  return _typeof(obj) === 'object' && obj !== null && (Object.getPrototypeOf(obj) === Object.prototype || Array.isArray(obj));\n}\n/**\n * Copy values into store and return a new values object\n * ({ a: 1, b: { c: 2 } }, { a: 4, b: { d: 5 } }) => { a: 4, b: { c: 2, d: 5 } }\n */\n\n\nfunction internalSetValues(store, values) {\n  var newStore = Array.isArray(store) ? _toConsumableArray(store) : _objectSpread({}, store);\n\n  if (!values) {\n    return newStore;\n  }\n\n  Object.keys(values).forEach(function (key) {\n    var prevValue = newStore[key];\n    var value = values[key];\n    var recursive = isObject(value);\n    var isArrayValue = Array.isArray(value);\n    newStore[key] = recursive ? internalSetValues(prevValue || (isArrayValue ? [] : {}), value || {}) : value;\n  });\n  return newStore;\n}\n\nexport function setValues(store) {\n  for (var _len = arguments.length, restValues = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    restValues[_key - 1] = arguments[_key];\n  }\n\n  return restValues.reduce(function (current, newStore) {\n    return internalSetValues(current, newStore);\n  }, store);\n}\nexport function matchNamePath(namePath, changedNamePath) {\n  if (!namePath || !changedNamePath || namePath.length !== changedNamePath.length) {\n    return false;\n  }\n\n  return namePath.every(function (nameUnit, i) {\n    return changedNamePath[i] === nameUnit;\n  });\n}\nexport function isSimilar(source, target) {\n  if (source === target) {\n    return true;\n  }\n\n  if (!source && target || source && !target) {\n    return false;\n  }\n\n  if (!source || !target || _typeof(source) !== 'object' || _typeof(target) !== 'object') {\n    return false;\n  }\n\n  var sourceKeys = Object.keys(source);\n  var targetKeys = Object.keys(target);\n  var keys = new Set([].concat(_toConsumableArray(sourceKeys), _toConsumableArray(targetKeys)));\n  return _toConsumableArray(keys).every(function (key) {\n    var sourceValue = source[key];\n    var targetValue = target[key];\n\n    if (typeof sourceValue === 'function' && typeof targetValue === 'function') {\n      return true;\n    }\n\n    return sourceValue === targetValue;\n  });\n}\nexport function defaultGetValueFromEvent(valuePropName) {\n  var event = arguments.length <= 1 ? undefined : arguments[1];\n\n  if (event && event.target && _typeof(event.target) === 'object' && valuePropName in event.target) {\n    return event.target[valuePropName];\n  }\n\n  return event;\n}\n/**\n * Moves an array item from one position in an array to another.\n *\n * Note: This is a pure function so a new array will be returned, instead\n * of altering the array argument.\n *\n * @param array         Array in which to move an item.         (required)\n * @param moveIndex     The index of the item to move.          (required)\n * @param toIndex       The index to move item at moveIndex to. (required)\n */\n\nexport function move(array, moveIndex, toIndex) {\n  var length = array.length;\n\n  if (moveIndex < 0 || moveIndex >= length || toIndex < 0 || toIndex >= length) {\n    return array;\n  }\n\n  var item = array[moveIndex];\n  var diff = moveIndex - toIndex;\n\n  if (diff > 0) {\n    // move left\n    return [].concat(_toConsumableArray(array.slice(0, toIndex)), [item], _toConsumableArray(array.slice(toIndex, moveIndex)), _toConsumableArray(array.slice(moveIndex + 1, length)));\n  }\n\n  if (diff < 0) {\n    // move right\n    return [].concat(_toConsumableArray(array.slice(0, moveIndex)), _toConsumableArray(array.slice(moveIndex + 1, toIndex + 1)), [item], _toConsumableArray(array.slice(toIndex + 1, length)));\n  }\n\n  return array;\n}","map":{"version":3,"sources":["/Users/neeleshsharma/Desktop/rkmin-fe/node_modules/rc-field-form/es/utils/valueUtil.js"],"names":["_objectSpread","_toConsumableArray","_typeof","get","set","toArray","getNamePath","path","getValue","store","namePath","value","setValue","removeIfUndefined","arguments","length","undefined","newStore","cloneByNamePathList","namePathList","forEach","containsNamePath","some","matchNamePath","isObject","obj","Object","getPrototypeOf","prototype","Array","isArray","internalSetValues","values","keys","key","prevValue","recursive","isArrayValue","setValues","_len","restValues","_key","reduce","current","changedNamePath","every","nameUnit","i","isSimilar","source","target","sourceKeys","targetKeys","Set","concat","sourceValue","targetValue","defaultGetValueFromEvent","valuePropName","event","move","array","moveIndex","toIndex","item","diff","slice"],"mappings":"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","sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport get from \"rc-util/es/utils/get\";\nimport set from \"rc-util/es/utils/set\";\nimport { toArray } from './typeUtil';\n/**\n * Convert name to internal supported format.\n * This function should keep since we still thinking if need support like `a.b.c` format.\n * 'a' => ['a']\n * 123 => [123]\n * ['a', 123] => ['a', 123]\n */\n\nexport function getNamePath(path) {\n  return toArray(path);\n}\nexport function getValue(store, namePath) {\n  var value = get(store, namePath);\n  return value;\n}\nexport function setValue(store, namePath, value) {\n  var removeIfUndefined = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var newStore = set(store, namePath, value, removeIfUndefined);\n  return newStore;\n}\nexport function cloneByNamePathList(store, namePathList) {\n  var newStore = {};\n  namePathList.forEach(function (namePath) {\n    var value = getValue(store, namePath);\n    newStore = setValue(newStore, namePath, value);\n  });\n  return newStore;\n}\nexport function containsNamePath(namePathList, namePath) {\n  return namePathList && namePathList.some(function (path) {\n    return matchNamePath(path, namePath);\n  });\n}\n\nfunction isObject(obj) {\n  return _typeof(obj) === 'object' && obj !== null && (Object.getPrototypeOf(obj) === Object.prototype || Array.isArray(obj));\n}\n/**\n * Copy values into store and return a new values object\n * ({ a: 1, b: { c: 2 } }, { a: 4, b: { d: 5 } }) => { a: 4, b: { c: 2, d: 5 } }\n */\n\n\nfunction internalSetValues(store, values) {\n  var newStore = Array.isArray(store) ? _toConsumableArray(store) : _objectSpread({}, store);\n\n  if (!values) {\n    return newStore;\n  }\n\n  Object.keys(values).forEach(function (key) {\n    var prevValue = newStore[key];\n    var value = values[key];\n    var recursive = isObject(value);\n    var isArrayValue = Array.isArray(value);\n    newStore[key] = recursive ? internalSetValues(prevValue || (isArrayValue ? [] : {}), value || {}) : value;\n  });\n  return newStore;\n}\n\nexport function setValues(store) {\n  for (var _len = arguments.length, restValues = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    restValues[_key - 1] = arguments[_key];\n  }\n\n  return restValues.reduce(function (current, newStore) {\n    return internalSetValues(current, newStore);\n  }, store);\n}\nexport function matchNamePath(namePath, changedNamePath) {\n  if (!namePath || !changedNamePath || namePath.length !== changedNamePath.length) {\n    return false;\n  }\n\n  return namePath.every(function (nameUnit, i) {\n    return changedNamePath[i] === nameUnit;\n  });\n}\nexport function isSimilar(source, target) {\n  if (source === target) {\n    return true;\n  }\n\n  if (!source && target || source && !target) {\n    return false;\n  }\n\n  if (!source || !target || _typeof(source) !== 'object' || _typeof(target) !== 'object') {\n    return false;\n  }\n\n  var sourceKeys = Object.keys(source);\n  var targetKeys = Object.keys(target);\n  var keys = new Set([].concat(_toConsumableArray(sourceKeys), _toConsumableArray(targetKeys)));\n  return _toConsumableArray(keys).every(function (key) {\n    var sourceValue = source[key];\n    var targetValue = target[key];\n\n    if (typeof sourceValue === 'function' && typeof targetValue === 'function') {\n      return true;\n    }\n\n    return sourceValue === targetValue;\n  });\n}\nexport function defaultGetValueFromEvent(valuePropName) {\n  var event = arguments.length <= 1 ? undefined : arguments[1];\n\n  if (event && event.target && _typeof(event.target) === 'object' && valuePropName in event.target) {\n    return event.target[valuePropName];\n  }\n\n  return event;\n}\n/**\n * Moves an array item from one position in an array to another.\n *\n * Note: This is a pure function so a new array will be returned, instead\n * of altering the array argument.\n *\n * @param array         Array in which to move an item.         (required)\n * @param moveIndex     The index of the item to move.          (required)\n * @param toIndex       The index to move item at moveIndex to. (required)\n */\n\nexport function move(array, moveIndex, toIndex) {\n  var length = array.length;\n\n  if (moveIndex < 0 || moveIndex >= length || toIndex < 0 || toIndex >= length) {\n    return array;\n  }\n\n  var item = array[moveIndex];\n  var diff = moveIndex - toIndex;\n\n  if (diff > 0) {\n    // move left\n    return [].concat(_toConsumableArray(array.slice(0, toIndex)), [item], _toConsumableArray(array.slice(toIndex, moveIndex)), _toConsumableArray(array.slice(moveIndex + 1, length)));\n  }\n\n  if (diff < 0) {\n    // move right\n    return [].concat(_toConsumableArray(array.slice(0, moveIndex)), _toConsumableArray(array.slice(moveIndex + 1, toIndex + 1)), [item], _toConsumableArray(array.slice(toIndex + 1, length)));\n  }\n\n  return array;\n}"]},"metadata":{},"sourceType":"module"}