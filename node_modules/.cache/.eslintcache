[{"/Users/neeleshsharma/Desktop/rkmin-fe/src/index.js":"1","/Users/neeleshsharma/Desktop/rkmin-fe/src/App.js":"2","/Users/neeleshsharma/Desktop/rkmin-fe/src/reportWebVitals.js":"3","/Users/neeleshsharma/Desktop/rkmin-fe/src/apiBaseInfo.js":"4","/Users/neeleshsharma/Desktop/rkmin-fe/src/Forms/index.js":"5","/Users/neeleshsharma/Desktop/rkmin-fe/src/Reports/index.js":"6","/Users/neeleshsharma/Desktop/rkmin-fe/src/Forms/incomingEntryForm/index.js":"7","/Users/neeleshsharma/Desktop/rkmin-fe/src/Forms/powderDispatchEntryForm/index.js":"8","/Users/neeleshsharma/Desktop/rkmin-fe/src/Forms/grindingEntryForm/index.js":"9"},{"size":501,"mtime":1646212506950,"results":"10","hashOfConfig":"11"},{"size":4572,"mtime":1646212506948,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1646212506950,"results":"13","hashOfConfig":"11"},{"size":55,"mtime":1646212506950,"results":"14","hashOfConfig":"11"},{"size":3616,"mtime":1646212506949,"results":"15","hashOfConfig":"11"},{"size":5925,"mtime":1646212506949,"results":"16","hashOfConfig":"11"},{"size":11410,"mtime":1646212506949,"results":"17","hashOfConfig":"11"},{"size":10274,"mtime":1646212506949,"results":"18","hashOfConfig":"11"},{"size":15333,"mtime":1646212506949,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"174nwlq",{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},"/Users/neeleshsharma/Desktop/rkmin-fe/src/index.js",[],"/Users/neeleshsharma/Desktop/rkmin-fe/src/App.js",["44","45","46","47","48","49","50"],"import logo from './logo.svg';\nimport './App.css';\nimport 'antd/dist/antd.css'; // or 'antd/dist/antd.less'\nimport Forms from './Forms';\nimport Reports from './Reports';\n\nimport {\n  BrowserRouter,\n  Switch,\n  Route,\n  Link,\n} from 'react-router-dom';\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Row, Button, Col, Input } from 'antd';\nimport {LineChartOutlined, RollbackOutlined} from '@ant-design/icons';\nimport axios from 'axios';\nimport { API_BASE } from './apiBaseInfo';\n\n\nexport const successToast = (message) =>  toast.success(message, { \n    position: \"top-center\",\n    autoClose: 4000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined, \n});\n\nexport const failureToast = (message) =>  toast.error(message, { \n  position: \"top-center\",\n  autoClose: 4000,\n  hideProgressBar: false,\n  closeOnClick: true,\n  pauseOnHover: true,\n  draggable: true,\n  progress: undefined, \n}); \n\nfunction App() {  \n \n  return (\n    <div className=\"App\"> \n          {\n            sessionStorage.getItem('rkminToken') != null ? <div>\n            <Row>\n        <Col span={24}>\n        <div>\n                      <Row style={{backgroundColor: '#1890ff', padding: '5px 20px', margin: '0px -30px'}}>\n                          <Col span={12} style={{textAlign: \"left\"}}>\n                              <Button type=\"text\" style={{color: 'white', backgroundColor: 'transparent'}}\n                              onMouseOver={(e) => { \n                                e.target.style.cursor = \"none\"; \n                              }}\n                              size=\"large\">R. Kk. MINERALS <sub> Stock Register</sub></Button>\n                          </Col>\n                          <Col span={12} style={{textAlign: \"right\"}}>\n                              {/* <Link to=\"/reports\"><Button type=\"ghost\" style={{color: 'white',  border: '0px'}} size=\"large\"> <LineChartOutlined /> Reports </Button></Link> */}\n                          </Col>\n                      </Row>\n                  </div> \n        </Col>\n      </Row>\n  \n      <Forms/>\n      <br/><br/><br/><br/>\n      <Reports/>\n            </div> :\n            <div>\n              <Row style={{backgroundColor: '#1890ff', padding: '5px 20px', margin: '0px -30px'}}>\n                          <Col span={12} style={{textAlign: \"left\"}}>\n                              <Button type=\"text\" style={{color: 'white', backgroundColor: 'transparent'}}\n                              onMouseOver={(e) => { \n                                e.target.style.cursor = \"none\"; \n                              }}\n                              size=\"large\">R. K. MINERALS <sub> Stock Register</sub></Button>\n                          </Col>\n                          <Col span={12} style={{textAlign: \"right\"}}>\n                          </Col>\n                      </Row>\n\n              <Row>\n                <Col span={24} align=\"center\" style={{paddingTop: '150px'}}> \n                  <br/>\n                  <Input placeholder=\"Email\" id=\"email\" type=\"text\" style={{width: '60%'}}/>\n                  <br/>\n                  <br/>\n                  <Input placeholder=\"password\" id=\"password\" type=\"password\" style={{width: '60%'}}/>\n                              <br/>\n                              <br/>\n                  <Button type=\"primary\"\n                  onClick={()=>{\n                    // alert(document.getElementById('email').value);\n                    axios.post(API_BASE + '/api/auth/login', {\n                                email: document.getElementById('email').value.toString() ,\n                                password: document.getElementById('password').value.toString() ,\n                      \n                    }).then((res)=>{\n                      // alert(document.getElementById('password').value);\n                      console.log(res);\n                      if(res.data.token != null){\n                        sessionStorage.setItem('rkminToken', res.data.token);\n                      } else {\n                        alert(res.data.error);\n                      }\n                    }).then(()=>{\n                      window.location.reload();\n                    }).catch((err)=>{\n                      alert(err);\n                    })\n                  }}\n                  >Log in</Button>\n                </Col>\n              </Row>\n            </div>\n          }\n      <ToastContainer\n      position=\"bottom-right\" />\n    </div>\n  );\n}\n\nexport default App;","/Users/neeleshsharma/Desktop/rkmin-fe/src/reportWebVitals.js",[],"/Users/neeleshsharma/Desktop/rkmin-fe/src/apiBaseInfo.js",[],"/Users/neeleshsharma/Desktop/rkmin-fe/src/Forms/index.js",["51","52","53","54","55","56"],"import React, { useState, useEffect } from 'react';\r\nimport { Row, Col, Tabs, Button, Divider, Menu, Dropdown, Space, Spin } from 'antd';\r\nimport axios from 'axios';\r\nimport { API_BASE } from '../apiBaseInfo';\r\nimport IncomingEntryForm from './incomingEntryForm';\r\nimport GrindingEntryForm from './grindingEntryForm';\r\nimport PowderDispatchingEntryForm from './powderDispatchEntryForm';\r\n\r\nimport {LineChartOutlined, FormOutlined} from '@ant-design/icons' \r\n\r\nconst { TabPane } = Tabs;\r\n\r\nfunction Forms(props) {\r\n\r\n    const [minerals, setMinerals] = useState([]);\r\n    const [apploading, setAppLoading] = useState(true);\r\n\r\n    useEffect(()=>{\r\n      apiCall(); \r\n        function apiCall() {\r\n          axios.get(API_BASE + \"/api/mineralModel\", {\r\n            headers : {\r\n              'Authorization': `${sessionStorage.getItem('rkminToken')}`\r\n            }\r\n          }).then((res) => {\r\n            console.log(res);\r\n\r\n            // const link = document.createElement('a');\r\n            // link.href = `${res.data}`;\r\n            // document.body.appendChild(link);\r\n            // link.click();\r\n            // document.body.removeChild(link);\r\n \r\n              setMinerals(res.data.content);\r\n              setAppLoading(false);\r\n            \r\n            // return () => { componentMounted = false }\r\n        }).catch(()=>{\r\n              alert('something went wrong in fetching the data. Please refresh!');\r\n        })}\r\n    },[])\r\n\r\n\r\n    const topTabs = [\r\n        {\r\n            title: \"üè† Home\",\r\n            content: apploading ? <span><h2><br/></h2><Spin style={{paddingTop:'40px'}} size=\"large\" /><br/><br/>loading</span> : <h2><FormOutlined style={{fontSize:'30px', paddingTop:'30px'}}/><br/> <sub>Application is ready</sub></h2>\r\n        },\r\n        {\r\n            title: \"Incoming\",\r\n            content: apploading ? <span><Spin style={{paddingTop:'30px'}} size=\"large\" /><br/><br/>loading</span> : <IncomingEntryForm minerals={minerals} />\r\n        },\r\n        {\r\n            title: \"Grinding\",\r\n            content: apploading ? <span><Spin style={{paddingTop:'30px'}} size=\"large\" /><br/><br/>loading</span> : <GrindingEntryForm minerals={minerals} />\r\n        },\r\n        {\r\n            title: \"Dispatch\",\r\n            content: apploading ? <span><Spin size=\"large\" /><br/><br/>loading</span> : <PowderDispatchingEntryForm minerals={minerals} />\r\n        }\r\n    ]\r\n\r\n    const menu = (\r\n        <Menu>\r\n        <Menu.Item>\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.antgroup.com\">\r\n            1st menu item\r\n          </a>\r\n        </Menu.Item>\r\n        <Menu.Item>\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.aliyun.com\">\r\n            2nd menu item\r\n          </a>\r\n        </Menu.Item>\r\n        <Menu.Item>\r\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.luohanacademy.com\">\r\n            3rd menu item\r\n          </a>\r\n        </Menu.Item>\r\n      </Menu>\r\n    );\r\n\r\n    return (\r\n        <>\r\n          <Row>\r\n              <Col span={24}>\r\n                <Tabs\r\n                style={{paddingTop:''}}\r\n                defaultActiveKey=\"1\" tabPosition={\"top\"} size=\"default\" onChange={()=>{}}>\r\n                {\r\n                        topTabs.map((tab) => {\r\n                            return <TabPane tab={tab.title} key={tab.title + \"-key\"}>\r\n                            {tab.content}\r\n                            </TabPane>\r\n                        })\r\n                    }\r\n                </Tabs>\r\n            </Col>\r\n          </Row>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Forms;","/Users/neeleshsharma/Desktop/rkmin-fe/src/Reports/index.js",["57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74"],"import React, { useEffect, useState } from 'react';\r\nimport { API_BASE } from '../apiBaseInfo';\r\nimport { Button, Row, Col, Modal, Spin } from 'antd';\r\nimport { failureToast, successToast } from '../App';\r\nimport axios from 'axios'; \r\nimport fileDownload from 'react-file-download';\r\nimport { Link } from 'react-router-dom';\r\nimport { DownloadOutlined, RollbackOutlined } from '@ant-design/icons'\r\n\r\n\r\nfunction Reports(props) {\r\n\r\n    const [minerals, setMinerals] = useState([]);\r\n    const [dataLoading, setDataLoading] = useState(true);\r\n\r\n    const [mineralStock, setMineralStock] = useState([]);\r\n    const [powderStock, setPowderStock] = useState({});\r\n    const [infoType, setInfoType] = useState(null);\r\n    const [showMineralInfo, setShowMineralInfo] = useState(false);\r\n    const [totalPowderBalance, setTotalPowder] = useState(false);\r\n\r\n    const modalHeaders = [\r\n        \"\",\r\n        \"Mineral Info.\",\r\n        \"Powder Info.\"\r\n    ] \r\n\r\n   \r\n\r\n    useEffect(()=>{\r\n        let componentMounted = true;\r\n        axios.get(API_BASE + \"/api/mineralModel\", {\r\n            headers : {\r\n              'Authorization': `${sessionStorage.getItem('rkminToken')}`\r\n            }\r\n          }).then((res) => {\r\n            console.log(res.data);\r\n            if(componentMounted){\r\n                setMinerals(res.data.content);\r\n                setDataLoading(false);\r\n            }\r\n            return () => { componentMounted=true }\r\n        }).catch(()=>{\r\n            window.location.reload();\r\n            failureToast('something went wrong in fetching the app data');\r\n        })\r\n    },[]) \r\n\r\n    const calMineralInfo = () => {\r\n        var j = [];\r\n        if(minerals.length != 0) {minerals.map((mineral) => {\r\n            var mineralBalance = 0;\r\n            mineral.rockTypes.map((rockType) => {\r\n                mineralBalance += rockType.typeBalance;\r\n            })  \r\n            j.push({mineralName: mineral.mineralName, mineralBalance : mineralBalance, measuringUnit : mineral.measuringUnit});\r\n        })\r\n        setMineralStock(j);\r\n        setShowMineralInfo(true)\r\n    }\r\n    };\r\n\r\n    return (\r\n        dataLoading == true ? <span><h2><br/></h2><Spin style={{paddingTop:'40px'}} size=\"large\" /><br/><br/>creating reports ...</span> :\r\n        <Row>\r\n            <Col span={24} align=\"left\" style={{paddingTop: '20px', paddingLeft: '50px'}}> \r\n                <h3 style={{paddingLeft: '5px'}}>Reports</h3>\r\n                <br/> \r\n                    <Button style={{marginRight: '10px'}} onClick={()=>{setInfoType(1); calMineralInfo();}}>Minerals Info.</Button> \r\n                    <br/>\r\n                    <br/>\r\n                         <Button style={{marginRight: '10px'}} onClick={()=>{setInfoType(2); setShowMineralInfo(true);}}>Powder Info.</Button>\r\n                         <br/> \r\n                         <br/> \r\n                    <a style={{marginRight: '10px'}} href={`${API_BASE}/api/incomingEntryModel/allInReport`}>\r\n                        <Button>Incoming Entries <DownloadOutlined style={{color:'#1890ff'}} size=\"large\"/></Button>\r\n                    </a>\r\n                    <br/>\r\n                    <br/>\r\n                    <a style={{marginRight: '10px'}} href={`${API_BASE}/api/grindingEntryModel/allInReport`}>\r\n                        <Button>Grinding Entries <DownloadOutlined style={{color:'#1890ff'}}/></Button>\r\n                    </a>\r\n                    <br/>\r\n                    <br/>\r\n                    <a style={{marginRight: '10px'}} href={`${API_BASE}/api/powderDispatchingEntryModel/allInReport`}>\r\n                        <Button>Powder Dispatching Entries <DownloadOutlined style={{color:'#1890ff'}}/></Button>\r\n                    </a> \r\n            </Col>\r\n            <Modal title={modalHeaders[infoType]} visible={showMineralInfo} \r\n        footer={[\r\n            <Button key=\"submit\" type=\"primary\" onClick={()=>{ \r\n                setShowMineralInfo(false);\r\n                }}>\r\n              Ok\r\n            </Button>, \r\n          ]}  onCancel={() => {setShowMineralInfo(false);}}> \r\n          <div style={{height:'40vh', overflowY:'scroll'}}>\r\n             {infoType == 1 ? <table>\r\n               <tr><td style={{border:'0px solid black', padding:'5px'}}><b> Mineral </b></td> <td style={{border:'0px solid black', padding:'5px'}}><b>Balance</b></td></tr>\r\n                            {\r\n                               mineralStock.length != 0 ? mineralStock.map((mineral) => {\r\n                               return <tr><td style={{border:'2px solid silver', padding:'5px 10px'}}>{mineral.mineralName} </td> <td style={{border:'2px solid silver', padding:'5px 10px'}}>{mineral.mineralBalance} {mineral.measuringUnit}</td></tr>\r\n                               }) : \"\"\r\n                            }\r\n            </table> : \"\"}\r\n            {infoType == 2 ?  <div>\r\n                            {\r\n                               minerals.length != 0 ? minerals.map((mineral) => {\r\n                                   var totalPowder\r\n                                   return <table style={{marginTop:'20px'}}><h4>{ mineral.mineralName }</h4>\r\n                                   {\r\n                                       mineral.powderGrades.length != 0 ? mineral.powderGrades.map((grade)=>{\r\n\r\n                                            return  <tr><td style={{border:'2px solid silver', padding:'5px 10px'}}>{grade.gradeName}, {grade.supplier} </td> <td style={{border:'2px solid silver', padding:'5px 10px'}}>{grade.gradeBalance} {mineral.measuringUnit}</td></tr>\r\n                                                \r\n                                       }) : \"\"\r\n                                   }\r\n                               \r\n                               </table>}) : \"\"\r\n                            }\r\n            </div> : \"\"}\r\n            </div>\r\n        </Modal>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default Reports;\r\n","/Users/neeleshsharma/Desktop/rkmin-fe/src/Forms/incomingEntryForm/index.js",["75","76","77","78","79","80","81","82","83","84","85","86"],"import React, { useState } from 'react';\r\nimport moment from 'moment';\r\nimport {\r\n    Row,\r\n    Col,\r\n    Form,\r\n    Input,\r\n    Button,\r\n    Radio,\r\n    Select,\r\n    Cascader,\r\n    DatePicker,\r\n    InputNumber,\r\n    TreeSelect,\r\n    Switch,\r\n    Modal\r\n  } from 'antd';\r\nimport TextArea from 'antd/lib/input/TextArea';\r\nimport axios from 'axios';\r\nimport { API_BASE } from '../../apiBaseInfo';\r\nimport { successToast, failureToast } from '../../App';\r\nimport {LoadingOutlined} from '@ant-design/icons';\r\n\r\n\r\nfunction IncomingEntryForm(props) { \r\n        const [componentSize, setComponentSize] = useState('small');\r\n\r\n        const [submitFormLoader, setSubmitFormLoader] = useState(false);\r\n        const [deleteByIdLoader, setDeleteByIdLoader] = useState(false);\r\n\r\n        //form payload\r\n        const [date, setDate] = useState(null);\r\n        const [mineralName, setMineralName] = useState(null);\r\n        const [mineralId, setMineralId] = useState(null);\r\n        const [supplier, setSupplier] = useState(null);\r\n        const [truckNumber, setTruckNumber] = useState(null);\r\n        const [quantity, setQuantity] = useState(null);\r\n        const [remarks, setRemarks] = useState(null);\r\n        const [incomingType, setIncomingType] = useState(null);\r\n        const [rockType, setRockType] = useState(null);\r\n\r\n        // affirmation after saving into the DB\r\n        const [showAffirmation, setShowAffermation] = useState(false);\r\n        const [dataAffirmationFromDB, setDataAffirmationFromDB] = useState(null);\r\n\r\n        const [mineralForComponent, setMineralForComponent] = useState(null);\r\n        const [dateForComponent, setDateForComponent] = useState(null);\r\n\r\n        const sendEntry = () => { \r\n            if(date == null || mineralId == null || mineralName == null || supplier == null || truckNumber  == null || quantity == null || rockType == null){\r\n                failureToast(\"All fields are required\");\r\n            } else {\r\n          setSubmitFormLoader(true);\r\n            axios.post(API_BASE + \"/api/incomingEntryModel\",\r\n            {\r\n                    \"incomingDate\": date,  \r\n                    \"mineralId\": mineralId,  \r\n                    \"mineralName\":mineralName, \r\n                    \"incomingType\": incomingType,   \r\n                    \"supplier\": supplier,  \r\n                    \"rockType\": rockType,  \r\n                    \"typeQuantity\": quantity,\r\n                    \"truckNumber\": truckNumber,\r\n                    \"remarks\": remarks\r\n            },\r\n            {headers : {\r\n              'Authorization': `${sessionStorage.getItem('rkminToken')}`\r\n            }}\r\n            ).then(res => {\r\n                console.log(res.data.message);\r\n                if(res.data.message === 'success'){\r\n                axios.get(API_BASE + '/api/incomingEntryModel/getLastInserted', {headers : {\r\n                  'Authorization': `${sessionStorage.getItem('rkminToken')}`\r\n                }}).then((res) => {\r\n                    setDataAffirmationFromDB(res.data.content);\r\n                }).then(()=>{\r\n                    setShowAffermation(true);\r\n                    setSubmitFormLoader(false);\r\n\r\n                })\r\n              }\r\n            }).catch(err => {\r\n              setSubmitFormLoader(false);\r\n              failureToast('Something went wrong while submitting the form');\r\n            })\r\n        }\r\n        }\r\n\r\n    return ( \r\n        <>\r\n        <Row \r\n        style={{height: '75vh', overflowY: 'scroll', paddingBottom:'20px', paddingTop:'20px'}}\r\n        \r\n        >\r\n            <Col xs={{span:24}} md={{span:20}}>\r\n            <Form\r\n                labelCol={{ span: 8 }}\r\n                wrapperCol={{ span: 12 }}\r\n                layout=\"horizontal\"\r\n                initialValues={{ size: componentSize }}\r\n                onValuesChange={()=>{}}\r\n                size={componentSize}\r\n                onFinish={(values)=>{\r\n                    console.log(values);\r\n                }}\r\n      > \r\n        <Form.Item label=\"Incoming Date\" style={{textAlign:'left'}}>\r\n          <DatePicker value={dateForComponent} onChange={(e) => {\r\n              if(e){\r\n                console.log(e._d);\r\n                setDateForComponent(moment(e._d));\r\n                var date = e._d.toString();\r\n                var dateArray = date.split(\" \");\r\n                // customDateString Day/Month/DateOFMonth/Year/\r\n                var customDateString = `${dateArray[0]}/${dateArray[1]}/${dateArray[2]}/${dateArray[3]}`;\r\n                setDate(customDateString);\r\n              }\r\n          }} />\r\n        </Form.Item>\r\n        <Form.Item label=\"Mineral\">\r\n          <Select defaultValue={\"Select\"}\r\n          value={mineralName}\r\n          onChange={(value) => {\r\n            console.log(value);\r\n            setMineralName(value);\r\n            props.minerals.map((mineral) => {\r\n                if(mineral.mineralName == value){\r\n                    setMineralId(mineral._id);\r\n                    setMineralForComponent(mineral);\r\n                }\r\n            })\r\n          }}>\r\n              {\r\n                  props.minerals.map((mineral) => {\r\n                    return <Select.Option value={mineral.mineralName}>\r\n                            {mineral.mineralName}\r\n                        </Select.Option>\r\n                  })\r\n              } \r\n          </Select>\r\n        </Form.Item>\r\n        <Form.Item label=\"Supplier\">\r\n        <Select\r\n        value={supplier}\r\n        onChange={(value) => {\r\n            setSupplier(value);\r\n        }}\r\n        >\r\n              { \r\n                mineralForComponent != null ? mineralForComponent.suppliers.map((supplier) => {\r\n                return <Select.Option value={supplier}>{supplier}</Select.Option>\r\n                }) \r\n                :\r\n                \"\"\r\n              } \r\n          </Select>\r\n        </Form.Item>\r\n\r\n        <Form.Item label=\"Incoming type\">\r\n        <Select\r\n        value={incomingType}\r\n        onChange={(value) => {\r\n            setIncomingType(value);\r\n        }}\r\n        >  \r\n            <Select.Option value={\"Rock\"}>Rock</Select.Option>\r\n            <Select.Option value={\"Powder\"}>Powder</Select.Option>\r\n        </Select>\r\n        </Form.Item>\r\n\r\n        <Form.Item label={incomingType === 'Powder' ? 'Powder type' : 'Rock type'}>\r\n        <Select\r\n        value={rockType}\r\n        onChange={(value) => {\r\n            setRockType(value);\r\n        }}\r\n        >\r\n              { \r\n                        mineralForComponent != null && incomingType === 'Rock' ? mineralForComponent.rockTypes.map((rockType) => {\r\n                            if(rockType.supplier === supplier){\r\n                            return <Select.Option value={rockType.rockType}>{rockType.rockType}</Select.Option>\r\n                            }\r\n                          })\r\n                          :\r\n                          \"\"\r\n              } \r\n              { \r\n                        mineralForComponent != null  && incomingType === 'Powder'  ? mineralForComponent.powderGrades.map((type) => {\r\n                            if(type.supplier === supplier){\r\n                            return <Select.Option value={type.gradeName}>{type.gradeName}</Select.Option>\r\n                            }\r\n                          })\r\n                          :\r\n                          \"\"\r\n              } \r\n          </Select>\r\n        </Form.Item> \r\n        <Form.Item label=\"Quantity\" style={{textAlign:\"left\"}}>\r\n          <InputNumber value={quantity} onChange={(value) => {\r\n             setQuantity(value)\r\n          }} />\r\n        </Form.Item>\r\n\r\n        <Form.Item label=\"Truck number\" style={{textAlign:\"left\"}}>\r\n          <Input value={truckNumber} onChange={(e) => {\r\n              setTruckNumber(e.target.value); \r\n          }}/>\r\n        </Form.Item>\r\n\r\n        <Form.Item  label=\"Remarks\" style={{textAlign:\"left\"}}>\r\n          <TextArea placeholder=\"type here ...\" value={remarks} onChange={(e) => {\r\n              setRemarks(e.target.value);\r\n          }} />\r\n        </Form.Item>\r\n         \r\n      </Form>\r\n      </Col>\r\n      <Col xs={{span:24}} md={{span:24}}>\r\n        <Button style={{}} type=\"primary\" onClick={sendEntry}>{submitFormLoader ? <LoadingOutlined/> : \"Save\"}</Button>  \r\n          <Button style={{}} onClick={()=>{\r\n               setShowAffermation(false); \r\n\r\n               setDateForComponent(null);\r\n               setRemarks(null);\r\n               setQuantity(null);\r\n               setTruckNumber(null);\r\n               setRockType(null);\r\n               setMineralName(null);\r\n               setMineralId(null);\r\n               setSupplier(null);\r\n          }} type=\"link\">Reset</Button>\r\n      </Col>\r\n        </Row>\r\n\r\n        <Modal title=\"Confirmation\" visible={showAffirmation} \r\n        footer={[\r\n          <Button key=\"back\" type=\"ghost\" onClick={() => {\r\n            setDeleteByIdLoader(true);\r\n            console.log(dataAffirmationFromDB);\r\n              //delete the record from database and resubmit\r\n              axios.post(API_BASE + \"/api/incomingEntryModel/deleteById/\" + dataAffirmationFromDB[0]._id, dataAffirmationFromDB[0], {headers : {\r\n                'Authorization': `${sessionStorage.getItem('rkminToken')}`\r\n              }}).then((res)=>{\r\n                  // failureToast(res.data.message + \"deleted\");\r\n                  // pdfEntryErrorReport.add(JSON.stringify(dataAffirmationFromDB));\r\n                  // pdfEntryErrorReport.create().download();\r\n              }).then(()=>{\r\n                setShowAffermation(false);\r\n                setDeleteByIdLoader(false);\r\n              }).catch(err => {\r\n                setDeleteByIdLoader(false);\r\n                failureToast(\"Error! Not deleted\")\r\n              })\r\n          }}>{deleteByIdLoader ? <LoadingOutlined/> : \"Edit\"}\r\n          </Button>,\r\n            <Button key=\"submit\" type=\"primary\" onClick={()=>{\r\n                successToast(\"Entry Saved\");\r\n                setShowAffermation(false);\r\n                \r\n                setDateForComponent(null);\r\n                setRemarks(null);\r\n                setQuantity(null);\r\n                setTruckNumber(null);\r\n                setRockType(null);\r\n                setMineralName(null);\r\n                setMineralId(null);\r\n                setSupplier(null);\r\n                }}>\r\n              Submit\r\n            </Button>,\r\n            // <Button\r\n            //   key=\"link\"\r\n            //   href=\"https://google.com\"\r\n            //   type=\"primary\"\r\n            //   loading={loading}\r\n            //   onClick={this.handleOk}\r\n            // >\r\n            //   Search on Google\r\n            // </Button>,\r\n          ]}  onCancel={() => {}}> \r\n            Please re-examin the submitted document\r\n            <br/>\r\n            <sub> Click on \"Submit\" to save or click on \"Edit\" to make changes  </sub>\r\n            <br/>\r\n            <hr/>\r\n            <ul>\r\n            {\r\n            dataAffirmationFromDB? Object.keys(dataAffirmationFromDB[0]).map((key) => {\r\n                if(key != \"_id\" && key != \"timeStamp\" && key != \"__v\") {\r\n                     return <li>{key} : {dataAffirmationFromDB[0][key]}</li>\r\n                } else {\r\n                    return \"\";\r\n                }\r\n            })\r\n            :\r\n            \"\"\r\n            }\r\n            </ul>\r\n        </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default IncomingEntryForm;","/Users/neeleshsharma/Desktop/rkmin-fe/src/Forms/powderDispatchEntryForm/index.js",["87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102"],"import React, { useState } from 'react';\r\nimport moment from 'moment';\r\nimport {\r\n    Row,\r\n    Col,\r\n    Form,\r\n    Input,\r\n    Button,\r\n    Radio,\r\n    Select,\r\n    Cascader,\r\n    DatePicker,\r\n    InputNumber,\r\n    TreeSelect,\r\n    Switch,\r\n    Modal\r\n  } from 'antd';\r\nimport TextArea from 'antd/lib/input/TextArea';\r\nimport axios from 'axios';\r\nimport { API_BASE } from '../../apiBaseInfo';\r\nimport { successToast, failureToast } from '../../App';\r\nimport {LoadingOutlined} from '@ant-design/icons';\r\n\r\nfunction PowderDispatchingEntryForm(props) { \r\n        const [componentSize, setComponentSize] = useState('small');\r\n       \r\n        // composition: [{inputPartRatio: Number, supplier: String, rockType: String}],\r\n\r\n        const productionUnits = ['Unit 1', 'Unit 2']\r\n        const shifts = ['Morning', 'Evening', 'Night']\r\n\r\n        const [submitFormLoader, setSubmitFormLoader] = useState(false);\r\n        const [deleteByIdLoader, setDeleteByIdLoader] = useState(false);\r\n\r\n        //form payload\r\n        const [date, setDate] = useState(null); \r\n        const [mineralId, setMineralId] = useState(null); \r\n        const [mineralName, setMineralName] = useState(null);\r\n        const [quantity, setQuantity] = useState(null);\r\n        const [gradeName, setGradeName] = useState(null);\r\n        const [supplier, setSupplier] = useState(null);\r\n        const [remarks, setRemarks] = useState(null);\r\n \r\n\r\n        // affirmation after saving into the DB\r\n        const [showAffirmation, setShowAffermation] = useState(false);\r\n        const [dataAffirmationFromDB, setDataAffirmationFromDB] = useState(null);\r\n\r\n        const [mineralForComponent, setMineralForComponent] = useState(null);\r\n        const [dateForComponent, setDateForComponent] = useState(null);\r\n\r\n        const sendEntry = () => { \r\n            if(date == null || mineralId == null || mineralName == null || quantity == null || gradeName == null){\r\n                failureToast(\"All fields are required\");\r\n            } else {\r\n          setSubmitFormLoader(true);\r\n            axios.post(API_BASE + \"/api/powderDispatchingEntryModel\",\r\n            {\r\n                \"dispatchingDate\": date,\r\n                \"mineralId\": mineralId,   \r\n                \"mineralName\": mineralName,\r\n                \"supplier\": supplier,\r\n                \"gradeName\": gradeName,\r\n                \"quantityDispatched\": quantity,\r\n                \"remarks\": remarks\r\n            },\r\n            {headers : {\r\n              'Authorization': `${sessionStorage.getItem('rkminToken')}`\r\n            }}\r\n            ).then(res => {\r\n                console.log(res.data.message);\r\n                if(res.data.message == 'success'){\r\n                axios.get(API_BASE + '/api/powderDispatchingEntryModel/getLastInserted', {headers : {\r\n                  'Authorization': `${sessionStorage.getItem('rkminToken')}`\r\n                }}).then((res) => {\r\n                    setDataAffirmationFromDB(res.data.content);\r\n                }).then(()=>{\r\n                    setShowAffermation(true);\r\n                    setSubmitFormLoader(false);\r\n                })\r\n              }\r\n            }).catch(err => {\r\n              setSubmitFormLoader(false);\r\n              failureToast('Something went wrong while submitting the form');\r\n            })\r\n        }\r\n        }\r\n\r\n        let gradeNameArray = [];\r\n\r\n    return (\r\n        <>\r\n        <Row \r\n        style={{height: '75vh', overflowY: 'scroll', paddingBottom:'20px', paddingTop:'20px'}}\r\n        \r\n        >\r\n            <Col xs={{span:24}} md={{span:20}}>\r\n            <Form\r\n                labelCol={{ span: 8 }}\r\n                wrapperCol={{ span: 12 }}\r\n                layout=\"horizontal\"\r\n                initialValues={{ size: componentSize }}\r\n                onValuesChange={()=>{}}\r\n                size={componentSize}\r\n                onFinish={(values)=>{\r\n                    console.log(values);\r\n                }}\r\n      > \r\n        <Form.Item label=\"Grinding Date\" style={{textAlign:'left'}}>\r\n          <DatePicker value={dateForComponent} onChange={(e) => {\r\n              if(e){\r\n                console.log(e._d);\r\n                setDateForComponent(moment(e._d));\r\n                var date = e._d.toString();\r\n                var dateArray = date.split(\" \");\r\n                // customDateString Day/Month/DateOFMonth/Year/\r\n                var customDateString = `${dateArray[0]}/${dateArray[1]}/${dateArray[2]}/${dateArray[3]}`;\r\n                setDate(customDateString);\r\n              }\r\n          }} />\r\n        </Form.Item> \r\n        <Form.Item label=\"Mineral\">\r\n          <Select defaultValue={\"Select\"}\r\n          value={mineralName}\r\n          onChange={(value) => {\r\n            console.log(value);\r\n            setMineralName(value);\r\n            props.minerals.map((mineral) => {\r\n                if(mineral.mineralName == value){\r\n                    setMineralId(mineral._id);\r\n                    setMineralForComponent(mineral);\r\n                }\r\n            })\r\n          }}>\r\n              {\r\n                  props.minerals.map((mineral) => {\r\n                    return <Select.Option value={mineral.mineralName}>\r\n                            {mineral.mineralName}\r\n                        </Select.Option>\r\n                  })\r\n              } \r\n          </Select>\r\n        </Form.Item>\r\n        <Form.Item label=\"Grade\">\r\n        <Select\r\n        value={gradeName}\r\n        onChange={(value) => {\r\n            setGradeName(value);\r\n        }}\r\n        >\r\n              { \r\n                mineralForComponent != null ? mineralForComponent.powderGrades.map((grade) => {\r\n                  if(!gradeNameArray.includes(grade.gradeName)){\r\n                    gradeNameArray.push(grade.gradeName);\r\n                    return <Select.Option value={grade.gradeName}>{grade.gradeName}</Select.Option>\r\n                  }\r\n                }) \r\n                :\r\n                \"\"\r\n              } \r\n          </Select>\r\n        </Form.Item>\r\n\r\n        <Form.Item label=\"Supplier\">\r\n        <Select\r\n        value={supplier}\r\n        onChange={(value) => {\r\n            setSupplier(value);\r\n        }}\r\n        >\r\n              { \r\n                mineralForComponent != null ? mineralForComponent.powderGrades.map((grade) => {\r\n                  if(grade.gradeName === gradeName){\r\n                    return <Select.Option value={grade.supplier}>{grade.supplier}</Select.Option>\r\n                  }\r\n                }) \r\n                :\r\n                \"\"\r\n              } \r\n          </Select>\r\n        </Form.Item>\r\n\r\n        <Form.Item label=\"Quantity Dispatched\" style={{textAlign:\"left\"}}>\r\n          <InputNumber value={quantity} onChange={(value) => {\r\n            setQuantity(value) \r\n          }} />\r\n        </Form.Item> \r\n        \r\n        <Form.Item  label=\"Remarks\" style={{textAlign:\"left\"}}>\r\n          <TextArea placeholder=\"type here ...\" value={remarks} onChange={(e) => {\r\n              setRemarks(e.target.value);\r\n          }} />\r\n        </Form.Item>\r\n      </Form>\r\n      </Col>\r\n      <Col xs={{span:24}} md={{span:24}}>\r\n          <Button style={{}} type=\"primary\" onClick={sendEntry}>{submitFormLoader ? <LoadingOutlined/> : \"Save\"}</Button>  \r\n          <Button style={{}} onClick={()=>{\r\n               setShowAffermation(false); \r\n\r\n               setDateForComponent(null);\r\n               setRemarks(null);\r\n               setQuantity(null); \r\n               setMineralName(null);\r\n               setMineralId(null); \r\n               setGradeName(null); \r\n          }} type=\"link\">Reset</Button>\r\n      </Col>\r\n        </Row>\r\n\r\n        <Modal title=\"Confirmation\" visible={showAffirmation} \r\n        footer={[\r\n          <Button key=\"back\" type=\"ghost\" onClick={() => {\r\n            setDeleteByIdLoader(true);\r\n            console.log(dataAffirmationFromDB);\r\n              //delete the record from database and resubmit\r\n              axios.post(API_BASE + \"/api/powderDispatchingEntryModel/deleteById/\" + dataAffirmationFromDB[0]._id, dataAffirmationFromDB[0], {headers : {\r\n                'Authorization': `${sessionStorage.getItem('rkminToken')}`\r\n              }}).then((res)=>{\r\n                  // failureToast(res.data.message + \"deleted\");\r\n                  // pdfEntryErrorReport.add(JSON.stringify(dataAffirmationFromDB));\r\n                  // pdfEntryErrorReport.create().download();\r\n              }).then(()=>{\r\n                setShowAffermation(false);\r\n                setDeleteByIdLoader(false);\r\n              }).catch(err => {\r\n                failureToast(\"Error! Not deleted\")\r\n                setDeleteByIdLoader(false);\r\n              })\r\n          }}>{deleteByIdLoader ? <LoadingOutlined/> : \"Edit\"}\r\n          </Button>,\r\n            <Button key=\"submit\" type=\"primary\" onClick={()=>{\r\n                successToast(\"Entry Saved\");\r\n                setShowAffermation(false);\r\n                \r\n               setDateForComponent(null);\r\n               setRemarks(null);\r\n               setQuantity(null); \r\n               setMineralName(null);\r\n               setMineralId(null); \r\n               setGradeName(null); \r\n                }}>\r\n              Submit\r\n            </Button>,\r\n            // <Button\r\n            //   key=\"link\"\r\n            //   href=\"https://google.com\"\r\n            //   type=\"primary\"\r\n            //   loading={loading}\r\n            //   onClick={this.handleOk}\r\n            // >\r\n            //   Search on Google\r\n            // </Button>,\r\n          ]}  onCancel={() => {}}> \r\n            Please re-examin the submitted document\r\n            <br/>\r\n            <sub> Click on \"Submit\" to save or click on \"Edit\" to make changes  </sub>\r\n            <br/>\r\n            <hr/>\r\n            <ul>\r\n            {\r\n            dataAffirmationFromDB? Object.keys(dataAffirmationFromDB[0]).map((key) => {\r\n                if(key != \"_id\" && key != \"timeStamp\" && key != \"__v\") {\r\n                     return <li>{key} : {JSON.stringify(dataAffirmationFromDB[0][key])}</li>\r\n                } else {\r\n                    return \"\";\r\n                }\r\n            })\r\n            :\r\n            \"\"\r\n            }\r\n            </ul>\r\n        </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default PowderDispatchingEntryForm;","/Users/neeleshsharma/Desktop/rkmin-fe/src/Forms/grindingEntryForm/index.js",["103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120"],"import React, { useState } from 'react';\r\nimport moment from 'moment';\r\nimport { PdfMakeWrapper } from 'pdfmake-wrapper'; \r\nimport * as pdfFonts from \"pdfmake/build/vfs_fonts\";\r\n\r\nimport {\r\n    Row,\r\n    Col,\r\n    Form,\r\n    Input,\r\n    Button,\r\n    Radio,\r\n    Select,\r\n    Cascader,\r\n    DatePicker,\r\n    InputNumber, \r\n    TreeSelect,\r\n    Switch,\r\n    Modal\r\n  } from 'antd';\r\nimport TextArea from 'antd/lib/input/TextArea';\r\nimport axios from 'axios';\r\nimport { API_BASE } from '../../apiBaseInfo';\r\nimport { successToast, failureToast } from '../../App';\r\nimport {LoadingOutlined} from '@ant-design/icons';\r\n\r\nfunction GrindingEntryForm(props) { \r\n        PdfMakeWrapper.setFonts(pdfFonts);\r\n        const pdfEntryErrorReport = new PdfMakeWrapper();\r\n\r\n        const [componentSize, setComponentSize] = useState('small');\r\n\r\n        const [submitFormLoader, setSubmitFormLoader] = useState(false);\r\n        const [deleteByIdLoader, setDeleteByIdLoader] = useState(false);\r\n\r\n        // composition: [{inputPartRatio: Number, supplier: String, rockType: String}],\r\n\r\n        const productionUnits = ['Unit 1', 'Unit 2']\r\n        const shifts = ['Morning', 'Evening', 'Night']\r\n\r\n        //form payload\r\n        const [date, setDate] = useState(null);\r\n        const [productionUnit, setProductionUnit] = useState(null);\r\n        const [mineralId, setMineralId] = useState(null);\r\n        const [shift, setShift] = useState(null);\r\n        const [mineralName, setMineralName] = useState(null);\r\n        const [quantity, setQuantity] = useState(null);\r\n        const [gradeName, setGradeName] = useState(null);\r\n\r\n        const [constituentType, setConstituentType] = useState(null);\r\n        const [composition, setComposition] = useState([]);\r\n\r\n        //for composition\r\n        const [rockType, setRockType] = useState(null);\r\n        const [supplier, setSupplier] = useState(null);\r\n        const [partRatio, setPartRatio] = useState(null);\r\n\r\n        // affirmation after saving into the DB\r\n        const [showAffirmation, setShowAffermation] = useState(false);\r\n        const [dataAffirmationFromDB, setDataAffirmationFromDB] = useState(null);\r\n\r\n        const [mineralForComponent, setMineralForComponent] = useState(null);\r\n        const [dateForComponent, setDateForComponent] = useState(null);\r\n\r\n        const sendEntry = () => { \r\n          console.log(composition);\r\n          var partRatioSum = 0;\r\n          if(composition.length != 0){ composition.map((part) => {\r\n            partRatioSum += part.inputPartRatio;\r\n          })}\r\n            if(date == null || mineralId == null || mineralName == null || quantity == null || composition == [] || gradeName == null || productionUnit == null || shift == null){\r\n                failureToast(\"All fields are required\");\r\n            } else if(partRatioSum < 1 || partRatioSum > 1){\r\n              failureToast(\"Sum of constituent partRatios must be 1\");\r\n            }else {\r\n          setSubmitFormLoader(true);\r\n            axios.post(API_BASE + \"/api/grindingEntryModel\",\r\n            {\r\n                    \"grindingDate\": date,\r\n                    \"productionUnitUsed\": productionUnit, \r\n                    \"shift\": shift,  \r\n                    \"mineralId\": mineralId,\r\n                    \"mineralName\": mineralName,\r\n                    \"gradeName\": gradeName,  \r\n                    \"quantityProduced\": quantity, \r\n                    \"composition\": composition\r\n            }, {headers : {\r\n              'Authorization': `${sessionStorage.getItem('rkminToken')}`\r\n            }}\r\n            ).then(res => {\r\n                console.log(res.data.message);\r\n                if(res.data.message == \"success\"){\r\n                axios.get(API_BASE + '/api/grindingEntryModel/getLastInserted', {headers : {\r\n                  'Authorization': `${sessionStorage.getItem('rkminToken')}`\r\n                }}).then((res) => {\r\n                    setDataAffirmationFromDB(res.data.content);\r\n                }).then(()=>{\r\n                    setShowAffermation(true);\r\n                    setSubmitFormLoader(false);\r\n                })\r\n              }\r\n            }).catch((err) => {\r\n              setSubmitFormLoader(false);\r\n              failureToast('Something went wrong while submitting the form');\r\n            })\r\n        }\r\n        }\r\n\r\n    return (\r\n        <>\r\n        <Row \r\n        style={{height: '75vh', overflowY: 'scroll', paddingBottom:'20px', paddingTop:'20px'}}\r\n        >\r\n            <Col xs={{span:24}} md={{span:20}}>\r\n            <Form\r\n                labelCol={{ span: 8 }}\r\n                wrapperCol={{ span: 12 }}\r\n                layout=\"horizontal\"\r\n                initialValues={{ size: componentSize }}\r\n                onValuesChange={()=>{}}\r\n                size={componentSize}\r\n                onFinish={(values)=>{\r\n                    console.log(values);\r\n                }}\r\n      > \r\n        <Form.Item label=\"Grinding Date\" style={{textAlign:'left'}}>\r\n          <DatePicker value={dateForComponent} onChange={(e) => {\r\n              if(e){\r\n                console.log(e._d);\r\n                setDateForComponent(moment(e._d));\r\n                var date = e._d.toString();\r\n                var dateArray = date.split(\" \");\r\n                // customDateString Day/Month/DateOFMonth/Year/\r\n                var customDateString = `${dateArray[0]}/${dateArray[1]}/${dateArray[2]}/${dateArray[3]}`;\r\n                setDate(customDateString);\r\n              }\r\n          }} />\r\n        </Form.Item>\r\n        <Form.Item label=\"Production Unit\">\r\n          <Select defaultValue={\"Select\"}\r\n          value={productionUnit}\r\n          onChange={(value) => {\r\n            console.log(value);\r\n            setProductionUnit(value); \r\n          }}>\r\n              {\r\n                  productionUnits.map((unit) => {\r\n                    return <Select.Option value={unit}>\r\n                            {unit}\r\n                        </Select.Option>\r\n                  })\r\n              } \r\n          </Select>\r\n        </Form.Item>\r\n        <Form.Item label=\"Shift\">\r\n          <Select defaultValue={\"Select\"}\r\n          value={shift}\r\n          onChange={(value) => {\r\n            console.log(value);\r\n            setShift(value); \r\n          }}>\r\n              {\r\n                  shifts.map((shift) => {\r\n                    return <Select.Option value={shift}>\r\n                            {shift}\r\n                        </Select.Option>\r\n                  })\r\n              } \r\n          </Select>\r\n        </Form.Item>\r\n        <Form.Item label=\"Mineral\">\r\n          <Select defaultValue={\"Select\"}\r\n          value={mineralName}\r\n          onChange={(value) => {\r\n            console.log(value);\r\n            setMineralName(value);\r\n            props.minerals.map((mineral) => {\r\n                if(mineral.mineralName == value){\r\n                    setMineralId(mineral._id);\r\n                    setMineralForComponent(mineral);\r\n                }\r\n            })\r\n          }}>\r\n              {\r\n                  props.minerals.map((mineral) => {\r\n                    return <Select.Option value={mineral.mineralName}>\r\n                            {mineral.mineralName}\r\n                        </Select.Option>\r\n                  })\r\n              } \r\n          </Select>\r\n        </Form.Item>\r\n        <Form.Item label=\"Grade\">\r\n        <Select\r\n        value={gradeName}\r\n        onChange={(value) => {\r\n            setGradeName(value);\r\n        }}\r\n        >\r\n              { \r\n                mineralForComponent != null ? mineralForComponent.powderGrades.map((grade) => {\r\n                return <Select.Option value={grade.gradeName}>{grade.gradeName}</Select.Option>\r\n                }) \r\n                :\r\n                \"\"\r\n              } \r\n          </Select>\r\n        </Form.Item>\r\n        <Form.Item label=\"Quantity\" style={{textAlign:\"left\"}}>\r\n          <InputNumber value={quantity} onChange={(value) => {\r\n              if(value > 0){ setQuantity(value) }\r\n              else {  \r\n                failureToast(\"'Quantity' must be a positive number\");\r\n            }\r\n          }} />\r\n        </Form.Item>\r\n\r\n        <Form.Item label=\"constituentType\" style={{textAlign:\"left\"}}>\r\n        <Radio.Group onChange={(value)=>{\r\n          setConstituentType(value.target.value);\r\n          console.log(constituentType);\r\n        }}>\r\n          <Radio value={'Powder'}>Powder</Radio>\r\n          <Radio value={'Rock'}>Rock</Radio>\r\n        </Radio.Group>\r\n        </Form.Item>\r\n\r\n        <Form.Item label=\"Composition\" style={{textAlign:\"left\"}}>\r\n          <sub>Part Ratio</sub><br/>\r\n          <InputNumber value={partRatio} onChange={(value) => {\r\n              if(value > 0){ setPartRatio(value) } \r\n          }} /><br/>\r\n          <sub>Supplier</sub>\r\n          <Select \r\n        value={supplier}\r\n        onChange={(value) => {\r\n            setSupplier(value);\r\n        }}\r\n        >\r\n              { \r\n                mineralForComponent != null ? mineralForComponent.suppliers.map((supplier) => {\r\n                return <Select.Option value={supplier}>{supplier}</Select.Option>\r\n                }) \r\n                :\r\n                \"\"\r\n              } \r\n          </Select>\r\n          <sub>{constituentType === 'Powder' ? 'Powder type' : 'Rock Type'}</sub>\r\n\r\n          <Select\r\n          value={rockType}\r\n          onChange={(value) => {\r\n            setRockType(value);\r\n        }}\r\n        >\r\n              { \r\n                        mineralForComponent != null && constituentType === 'Rock' ? mineralForComponent.rockTypes.map((rockType) => {\r\n                            if(rockType.supplier === supplier){\r\n                            return <Select.Option value={rockType.rockType}>{rockType.rockType}</Select.Option>\r\n                            }\r\n                          })\r\n                          :\r\n                          \"\"\r\n              } \r\n              { \r\n                        mineralForComponent != null && constituentType === 'Powder' ? mineralForComponent.powderGrades.map((grade) => {\r\n                            if(grade.supplier === supplier){\r\n                            return <Select.Option value={grade.gradeName}>{grade.gradeName}</Select.Option>\r\n                            }\r\n                          })\r\n                          :\r\n                          \"\"\r\n              }\r\n          </Select>\r\n          <Button\r\n          style={{marginTop:'5px'}}\r\n          onClick={() => {\r\n            if(partRatio == null || supplier == null || rockType == null){\r\n              failureToast(\"Empty fields in 'Composition' are not allowed\");\r\n            } else {\r\n              const compositionPart = constituentType === 'Rock' ? \r\n              {\r\n                inputPartRatio: partRatio, \r\n                supplier: supplier, \r\n                rockType: rockType, \r\n                constituentType: constituentType} \r\n              :\r\n              {\r\n                inputPartRatio: partRatio, \r\n                supplier: supplier, \r\n                grade: rockType, \r\n                constituentType: constituentType\r\n              } \r\n              ;\r\n              composition.push(compositionPart);\r\n              setPartRatio(null);\r\n              setSupplier(null);\r\n              setRockType(null);\r\n            }\r\n          }}\r\n          >Add</Button>\r\n          <span style={{ marginLeft: '20px'}}>\r\n          <span style={{borderRadius:'2px', padding: '3.5px', marginLeft:'15px', color: 'yellow', backgroundColor: '#1890ff'}}>\r\n              <span style={{color:'yellow'}}>{composition.length}</span> constituents\r\n          </span>\r\n          <Button\r\n          style={{marginTop:'2px', marginLeft: '3px', border: '1px solid #1890ff'}}\r\n          onClick={() => {\r\n            setComposition([]);\r\n          }}\r\n          >Reset constituents</Button>\r\n          </span>\r\n        </Form.Item>\r\n \r\n         \r\n      </Form>\r\n      </Col>\r\n      <Col xs={{span:24}} md={{span:24}}>\r\n          <Button style={{}} type=\"primary\" onClick={sendEntry}>{ submitFormLoader? <LoadingOutlined/>:\"Save\"}</Button>  \r\n          <Button style={{}} onClick={()=>{\r\n               setShowAffermation(false); \r\n\r\n               setDateForComponent(null);\r\n               setShift(null);\r\n               setQuantity(null);\r\n               setComposition([]); \r\n               setMineralName(null);\r\n               setMineralId(null); \r\n               setGradeName(null);\r\n               setProductionUnit(null);\r\n          }} type=\"link\">Reset</Button>\r\n      </Col>\r\n        </Row>\r\n\r\n        <Modal title=\"Confirmation\" visible={showAffirmation} \r\n        footer={[\r\n            <Button key=\"back\" type=\"ghost\" onClick={() => {\r\n              setDeleteByIdLoader(true);\r\n              console.log(dataAffirmationFromDB);\r\n                //delete the record from database and resubmit\r\n                axios.post(API_BASE + \"/api/grindingEntryModel/deleteById/\" + dataAffirmationFromDB[0]._id, dataAffirmationFromDB[0], {headers : {\r\n                  'Authorization': `${sessionStorage.getItem('rkminToken')}`\r\n                }}).then((res)=>{\r\n                    // failureToast(res.data.message + \"deleted\");\r\n                    // pdfEntryErrorReport.add(JSON.stringify(dataAffirmationFromDB));\r\n                    // pdfEntryErrorReport.create().download();\r\n                }).then(()=>{\r\n                  setShowAffermation(false);\r\n                  setDeleteByIdLoader(false);\r\n                }).catch(err => {\r\n                  failureToast(\"Error! Not deleted\");\r\n                  setDeleteByIdLoader(false);\r\n                })\r\n            }}>{deleteByIdLoader ? <LoadingOutlined/> : \"Edit\" }\r\n            </Button>,\r\n            <Button key=\"submit\" type=\"primary\" onClick={()=>{\r\n                successToast(\"Entry Saved\");\r\n                setShowAffermation(false);\r\n                \r\n                setDateForComponent(null);\r\n                setShift(null);\r\n                setQuantity(null);\r\n                setComposition([]); \r\n                setMineralName(null);\r\n                setMineralId(null); \r\n                setGradeName(null);\r\n                setProductionUnit(null);\r\n                }}>\r\n              Done\r\n            </Button>,\r\n            // <Button\r\n            //   key=\"link\"\r\n            //   href=\"https://google.com\"\r\n            //   type=\"primary\"\r\n            //   loading={loading}\r\n            //   onClick={this.handleOk}\r\n            // >\r\n            //   Search on Google\r\n            // </Button>,\r\n          ]}  onCancel={() => {}}> \r\n            Please re-examin the submitted document\r\n            <br/>\r\n            <sub> Click on \"Submit\" to save or click on \"Edit\" to make changes  </sub>\r\n            <br/>\r\n            <hr/>\r\n            <ul>\r\n            {\r\n            dataAffirmationFromDB? Object.keys(dataAffirmationFromDB[0]).map((key) => {\r\n                if(key != \"_id\" && key != \"timeStamp\" && key != \"__v\") {\r\n                     return <li>{key} : {JSON.stringify(dataAffirmationFromDB[0][key])}</li>\r\n                } else {\r\n                    return \"\";\r\n                }\r\n            })\r\n            :\r\n            \"\"\r\n            }\r\n            </ul>\r\n        </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GrindingEntryForm;",{"ruleId":"121","severity":1,"message":"122","line":1,"column":8,"nodeType":"123","messageId":"124","endLine":1,"endColumn":12},{"ruleId":"121","severity":1,"message":"125","line":8,"column":3,"nodeType":"123","messageId":"124","endLine":8,"endColumn":16},{"ruleId":"121","severity":1,"message":"126","line":9,"column":3,"nodeType":"123","messageId":"124","endLine":9,"endColumn":9},{"ruleId":"121","severity":1,"message":"127","line":10,"column":3,"nodeType":"123","messageId":"124","endLine":10,"endColumn":8},{"ruleId":"121","severity":1,"message":"128","line":11,"column":3,"nodeType":"123","messageId":"124","endLine":11,"endColumn":7},{"ruleId":"121","severity":1,"message":"129","line":17,"column":9,"nodeType":"123","messageId":"124","endLine":17,"endColumn":26},{"ruleId":"121","severity":1,"message":"130","line":17,"column":28,"nodeType":"123","messageId":"124","endLine":17,"endColumn":44},{"ruleId":"121","severity":1,"message":"131","line":2,"column":26,"nodeType":"123","messageId":"124","endLine":2,"endColumn":32},{"ruleId":"121","severity":1,"message":"132","line":2,"column":34,"nodeType":"123","messageId":"124","endLine":2,"endColumn":41},{"ruleId":"121","severity":1,"message":"133","line":2,"column":49,"nodeType":"123","messageId":"124","endLine":2,"endColumn":57},{"ruleId":"121","severity":1,"message":"134","line":2,"column":59,"nodeType":"123","messageId":"124","endLine":2,"endColumn":64},{"ruleId":"121","severity":1,"message":"129","line":9,"column":9,"nodeType":"123","messageId":"124","endLine":9,"endColumn":26},{"ruleId":"121","severity":1,"message":"135","line":63,"column":11,"nodeType":"123","messageId":"124","endLine":63,"endColumn":15},{"ruleId":"121","severity":1,"message":"136","line":4,"column":24,"nodeType":"123","messageId":"124","endLine":4,"endColumn":36},{"ruleId":"121","severity":1,"message":"137","line":6,"column":8,"nodeType":"123","messageId":"124","endLine":6,"endColumn":20},{"ruleId":"121","severity":1,"message":"128","line":7,"column":10,"nodeType":"123","messageId":"124","endLine":7,"endColumn":14},{"ruleId":"121","severity":1,"message":"130","line":8,"column":28,"nodeType":"123","messageId":"124","endLine":8,"endColumn":44},{"ruleId":"121","severity":1,"message":"138","line":17,"column":12,"nodeType":"123","messageId":"124","endLine":17,"endColumn":23},{"ruleId":"121","severity":1,"message":"139","line":17,"column":25,"nodeType":"123","messageId":"124","endLine":17,"endColumn":39},{"ruleId":"121","severity":1,"message":"140","line":20,"column":12,"nodeType":"123","messageId":"124","endLine":20,"endColumn":30},{"ruleId":"121","severity":1,"message":"141","line":20,"column":32,"nodeType":"123","messageId":"124","endLine":20,"endColumn":46},{"ruleId":"142","severity":1,"message":"143","line":51,"column":28,"nodeType":"144","messageId":"145","endLine":51,"endColumn":30},{"ruleId":"146","severity":1,"message":"147","line":51,"column":58,"nodeType":"148","messageId":"149","endLine":51,"endColumn":60},{"ruleId":"146","severity":1,"message":"147","line":53,"column":46,"nodeType":"148","messageId":"149","endLine":53,"endColumn":48},{"ruleId":"142","severity":1,"message":"150","line":64,"column":21,"nodeType":"144","messageId":"145","endLine":64,"endColumn":23},{"ruleId":"142","severity":1,"message":"150","line":98,"column":24,"nodeType":"144","messageId":"145","endLine":98,"endColumn":26},{"ruleId":"142","severity":1,"message":"143","line":101,"column":52,"nodeType":"144","messageId":"145","endLine":101,"endColumn":54},{"ruleId":"142","severity":1,"message":"150","line":106,"column":23,"nodeType":"144","messageId":"145","endLine":106,"endColumn":25},{"ruleId":"142","severity":1,"message":"143","line":108,"column":48,"nodeType":"144","messageId":"145","endLine":108,"endColumn":50},{"ruleId":"121","severity":1,"message":"151","line":109,"column":40,"nodeType":"123","messageId":"124","endLine":109,"endColumn":51},{"ruleId":"142","severity":1,"message":"143","line":112,"column":68,"nodeType":"144","messageId":"145","endLine":112,"endColumn":70},{"ruleId":"121","severity":1,"message":"152","line":9,"column":5,"nodeType":"123","messageId":"124","endLine":9,"endColumn":10},{"ruleId":"121","severity":1,"message":"153","line":11,"column":5,"nodeType":"123","messageId":"124","endLine":11,"endColumn":13},{"ruleId":"121","severity":1,"message":"154","line":14,"column":5,"nodeType":"123","messageId":"124","endLine":14,"endColumn":15},{"ruleId":"121","severity":1,"message":"126","line":15,"column":5,"nodeType":"123","messageId":"124","endLine":15,"endColumn":11},{"ruleId":"121","severity":1,"message":"155","line":26,"column":31,"nodeType":"123","messageId":"124","endLine":26,"endColumn":47},{"ruleId":"146","severity":1,"message":"147","line":126,"column":42,"nodeType":"148","messageId":"149","endLine":126,"endColumn":44},{"ruleId":"142","severity":1,"message":"150","line":127,"column":40,"nodeType":"144","messageId":"145","endLine":127,"endColumn":42},{"ruleId":"146","severity":1,"message":"156","line":179,"column":127,"nodeType":"148","messageId":"157","endLine":179,"endColumn":129},{"ruleId":"146","severity":1,"message":"156","line":188,"column":130,"nodeType":"148","messageId":"157","endLine":188,"endColumn":132},{"ruleId":"142","severity":1,"message":"143","line":289,"column":24,"nodeType":"144","messageId":"145","endLine":289,"endColumn":26},{"ruleId":"142","severity":1,"message":"143","line":289,"column":40,"nodeType":"144","messageId":"145","endLine":289,"endColumn":42},{"ruleId":"142","severity":1,"message":"143","line":289,"column":62,"nodeType":"144","messageId":"145","endLine":289,"endColumn":64},{"ruleId":"121","severity":1,"message":"158","line":7,"column":5,"nodeType":"123","messageId":"124","endLine":7,"endColumn":10},{"ruleId":"121","severity":1,"message":"152","line":9,"column":5,"nodeType":"123","messageId":"124","endLine":9,"endColumn":10},{"ruleId":"121","severity":1,"message":"153","line":11,"column":5,"nodeType":"123","messageId":"124","endLine":11,"endColumn":13},{"ruleId":"121","severity":1,"message":"154","line":14,"column":5,"nodeType":"123","messageId":"124","endLine":14,"endColumn":15},{"ruleId":"121","severity":1,"message":"126","line":15,"column":5,"nodeType":"123","messageId":"124","endLine":15,"endColumn":11},{"ruleId":"121","severity":1,"message":"155","line":25,"column":31,"nodeType":"123","messageId":"124","endLine":25,"endColumn":47},{"ruleId":"121","severity":1,"message":"159","line":29,"column":15,"nodeType":"123","messageId":"124","endLine":29,"endColumn":30},{"ruleId":"121","severity":1,"message":"160","line":30,"column":15,"nodeType":"123","messageId":"124","endLine":30,"endColumn":21},{"ruleId":"142","severity":1,"message":"150","line":72,"column":37,"nodeType":"144","messageId":"145","endLine":72,"endColumn":39},{"ruleId":"146","severity":1,"message":"147","line":128,"column":42,"nodeType":"148","messageId":"149","endLine":128,"endColumn":44},{"ruleId":"142","severity":1,"message":"150","line":129,"column":40,"nodeType":"144","messageId":"145","endLine":129,"endColumn":42},{"ruleId":"146","severity":1,"message":"156","line":152,"column":92,"nodeType":"148","messageId":"157","endLine":152,"endColumn":94},{"ruleId":"146","severity":1,"message":"156","line":172,"column":92,"nodeType":"148","messageId":"157","endLine":172,"endColumn":94},{"ruleId":"142","severity":1,"message":"143","line":263,"column":24,"nodeType":"144","messageId":"145","endLine":263,"endColumn":26},{"ruleId":"142","severity":1,"message":"143","line":263,"column":40,"nodeType":"144","messageId":"145","endLine":263,"endColumn":42},{"ruleId":"142","severity":1,"message":"143","line":263,"column":62,"nodeType":"144","messageId":"145","endLine":263,"endColumn":64},{"ruleId":"121","severity":1,"message":"158","line":10,"column":5,"nodeType":"123","messageId":"124","endLine":10,"endColumn":10},{"ruleId":"121","severity":1,"message":"153","line":14,"column":5,"nodeType":"123","messageId":"124","endLine":14,"endColumn":13},{"ruleId":"121","severity":1,"message":"154","line":17,"column":5,"nodeType":"123","messageId":"124","endLine":17,"endColumn":15},{"ruleId":"121","severity":1,"message":"126","line":18,"column":5,"nodeType":"123","messageId":"124","endLine":18,"endColumn":11},{"ruleId":"121","severity":1,"message":"161","line":21,"column":8,"nodeType":"123","messageId":"124","endLine":21,"endColumn":16},{"ruleId":"121","severity":1,"message":"162","line":29,"column":15,"nodeType":"123","messageId":"124","endLine":29,"endColumn":34},{"ruleId":"121","severity":1,"message":"155","line":31,"column":31,"nodeType":"123","messageId":"124","endLine":31,"endColumn":47},{"ruleId":"142","severity":1,"message":"143","line":68,"column":33,"nodeType":"144","messageId":"145","endLine":68,"endColumn":35},{"ruleId":"146","severity":1,"message":"147","line":68,"column":63,"nodeType":"148","messageId":"149","endLine":68,"endColumn":65},{"ruleId":"142","severity":1,"message":"150","line":71,"column":108,"nodeType":"144","messageId":"145","endLine":71,"endColumn":110},{"ruleId":"142","severity":1,"message":"150","line":92,"column":37,"nodeType":"144","messageId":"145","endLine":92,"endColumn":39},{"ruleId":"146","severity":1,"message":"147","line":177,"column":42,"nodeType":"148","messageId":"149","endLine":177,"endColumn":44},{"ruleId":"142","severity":1,"message":"150","line":178,"column":40,"nodeType":"144","messageId":"145","endLine":178,"endColumn":42},{"ruleId":"146","severity":1,"message":"156","line":257,"column":130,"nodeType":"148","messageId":"157","endLine":257,"endColumn":132},{"ruleId":"146","severity":1,"message":"156","line":266,"column":132,"nodeType":"148","messageId":"157","endLine":266,"endColumn":134},{"ruleId":"142","severity":1,"message":"143","line":389,"column":24,"nodeType":"144","messageId":"145","endLine":389,"endColumn":26},{"ruleId":"142","severity":1,"message":"143","line":389,"column":40,"nodeType":"144","messageId":"145","endLine":389,"endColumn":42},{"ruleId":"142","severity":1,"message":"143","line":389,"column":62,"nodeType":"144","messageId":"145","endLine":389,"endColumn":64},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'BrowserRouter' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'Link' is defined but never used.","'LineChartOutlined' is defined but never used.","'RollbackOutlined' is defined but never used.","'Button' is defined but never used.","'Divider' is defined but never used.","'Dropdown' is defined but never used.","'Space' is defined but never used.","'menu' is assigned a value but never used.","'successToast' is defined but never used.","'fileDownload' is defined but never used.","'powderStock' is assigned a value but never used.","'setPowderStock' is assigned a value but never used.","'totalPowderBalance' is assigned a value but never used.","'setTotalPowder' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Expected '===' and instead saw '=='.","'totalPowder' is defined but never used.","'Radio' is defined but never used.","'Cascader' is defined but never used.","'TreeSelect' is defined but never used.","'setComponentSize' is assigned a value but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'Input' is defined but never used.","'productionUnits' is assigned a value but never used.","'shifts' is assigned a value but never used.","'TextArea' is defined but never used.","'pdfEntryErrorReport' is assigned a value but never used."]